parameters:
- name: feed
  type: string

steps:
- powershell: |
    python -c 'x'
    echo 'after fail'
  errorActionPreference: 'stop'
  displayName: debug

- script: |
    set -e
    sudo apt-get remove -y swig
    sudo apt-get install -y swig3.0
    sudo ln -s swig3.0 /usr/bin/swig
  displayName: Downgrade swig
  condition: contains('${{ parameters.feed }}', 'ubuntu')

- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.9
  displayName: Configure Python version

- task: NodeTool@0
  inputs:
    versionSpec: 16.3.0
  displayName: Configure Node.js version

- powershell: |
    # Do not cache setup dependencies. PR pipeline should use more stable version.
    # If they are corrupted, this pipeline should fail and PR pipeline will use yesterday's cache.
    python -m pip install -U -r dependencies/setup.txt
    # Pre-installed packages are global and "~/.local" has not been created at this point.
    # So we can use user site-packages as a clean environment, to avoid tricky virtualenv.
    python -m pip install --user -r dependencies/develop.txt
    python -m pip install --user -r dependencies/required.txt
    python -m pip install --user -r dependencies/required_extra.txt
    python -m pip install --user -r dependencies/recommended.txt
  displayName: Install Python packages

- powershell: |
    yarn --cwd ts/nni_manager install
    yarn --cwd ts/webui install
  displayName: Install Node.js packages

- powershell: |
    python test/vso_tools/pack_dependencies.py
    Move-Item cache.zip $(Build.ArtifactStagingDirectory)
  displayName: Create cache archive

- task: UniversalPackages@0
  inputs:
    command: publish
    vstsFeedPublish: NNIOpenSource/sandbox
    vstsFeedPackagePublish: $(feed)
  displayName: Upload cache archive
