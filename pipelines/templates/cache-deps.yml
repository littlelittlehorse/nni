parameters:
- name: feed
  type: string

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.9
  displayName: Configure Python version

- task: NodeTool@0
  inputs:
    versionSpec: 16.3.0
  displayName: Configure Node.js version

# Do not cache setup dependencies. PR pipeline should use more stable version.
# If they are corrupted, this pipeline should fail and PR pipeline will use yesterday's cache.
# Pre-installed packages are global and "~/.local" has not been created at this point.
# So we can use user site-packages as a clean environment, to avoid tricky virtualenv.
- script: |
    rem || set -e
    python -m pip install -U -r dependencies/setup.txt
    python -m pip install --user -r dependencies/develop.txt
    python -m pip install --user -r dependencies/required.txt
    python -m pip install --user -r dependencies/required_extra.txt
    python -m pip install --user -r dependencies/recommended.txt
  displayName: Install Python dependencies

- script: |
    yarn --cwd ts/nni_manager install
  displayName: Install NNI Manager dependencies

- script: |
    yarn --cwd ts/webui install
  displayName: Install Web UI dependencies

# do not add quotes, because they will be included in argv on windows
- script: |
    python test/vso_tools/pack_dependencies.py $(Build.ArtifactStagingDirectory)
  displayName: Create cache archive

- task: UniversalPackages@0
  inputs:
    command: publish
    vstsFeedPublish: NNIOpenSource/sandbox
    vstsFeedPackagePublish: ${{ parameters.feed }}
  displayName: Upload cache archive
